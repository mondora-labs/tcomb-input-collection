{
  "reportTitle": "tcomb-input-collection",
  "stats": {
    "suites": 2,
    "tests": 9,
    "passes": 9,
    "pending": 0,
    "failures": 0,
    "start": "2015-04-15T09:42:35.007Z",
    "end": "2015-04-15T09:42:35.155Z",
    "duration": 148,
    "testsRegistered": 9,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Multiselect",
        "suites": [],
        "tests": [
          {
            "title": "should contain checkboxes",
            "fullTitle": "Multiselect should contain checkboxes",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "checkboxes.length.should.equal(<span class=\"hljs-number\">3</span>);\ncheckboxes.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(checkbox)</span> </span>{\n    checkbox.props.type.should.equal(<span class=\"hljs-string\">\"checkbox\"</span>);\n});",
            "isRoot": false,
            "uuid": "d3d92134-9b83-4692-b3a5-0b4168d6051d",
            "parentUUID": "3b5137c9-afb8-42b3-995d-1715efdb268b",
            "skipped": false
          },
          {
            "title": "should render checkboxes with the correct checked status based on the value passed to the component",
            "fullTitle": "Multiselect should render checkboxes with the correct checked status based on the value passed to the component",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> aInput = checkboxes[<span class=\"hljs-number\">0</span>].getDOMNode();\n<span class=\"hljs-keyword\">var</span> bInput = checkboxes[<span class=\"hljs-number\">1</span>].getDOMNode();\n<span class=\"hljs-keyword\">var</span> cInput = checkboxes[<span class=\"hljs-number\">2</span>].getDOMNode();\naInput.checked.should.equal(<span class=\"hljs-literal\">true</span>);\nbInput.checked.should.equal(<span class=\"hljs-literal\">false</span>);\ncInput.checked.should.equal(<span class=\"hljs-literal\">false</span>);",
            "isRoot": false,
            "uuid": "fccd0be8-4eb5-45be-b0b1-9caff6127f51",
            "parentUUID": "3b5137c9-afb8-42b3-995d-1715efdb268b",
            "skipped": false
          },
          {
            "title": "should change checked status on checkbox click",
            "fullTitle": "Multiselect should change checked status on checkbox click",
            "timedOut": false,
            "duration": 26,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> aInput = checkboxes[<span class=\"hljs-number\">0</span>].getDOMNode();\n<span class=\"hljs-keyword\">var</span> bInput = checkboxes[<span class=\"hljs-number\">1</span>].getDOMNode();\n<span class=\"hljs-keyword\">var</span> cInput = checkboxes[<span class=\"hljs-number\">2</span>].getDOMNode();\nReact.addons.TestUtils.Simulate.change(aInput);\nReact.addons.TestUtils.Simulate.change(bInput);\nReact.addons.TestUtils.Simulate.change(cInput);\naInput.checked.should.equal(<span class=\"hljs-literal\">false</span>);\nbInput.checked.should.equal(<span class=\"hljs-literal\">true</span>);\ncInput.checked.should.equal(<span class=\"hljs-literal\">true</span>);\nReact.addons.TestUtils.Simulate.change(aInput);\nReact.addons.TestUtils.Simulate.change(bInput);\nReact.addons.TestUtils.Simulate.change(cInput);\naInput.checked.should.equal(<span class=\"hljs-literal\">true</span>);\nbInput.checked.should.equal(<span class=\"hljs-literal\">false</span>);\ncInput.checked.should.equal(<span class=\"hljs-literal\">false</span>);",
            "isRoot": false,
            "uuid": "da8ae2ee-1c9e-4787-8fe7-ba6717dd3593",
            "parentUUID": "3b5137c9-afb8-42b3-995d-1715efdb268b",
            "skipped": false
          },
          {
            "title": "should call onChange with the new status",
            "fullTitle": "Multiselect should call onChange with the new status",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> aInput = checkboxes[<span class=\"hljs-number\">0</span>].getDOMNode();\n<span class=\"hljs-keyword\">var</span> bInput = checkboxes[<span class=\"hljs-number\">1</span>].getDOMNode();\n<span class=\"hljs-keyword\">var</span> cInput = checkboxes[<span class=\"hljs-number\">2</span>].getDOMNode();\n<span class=\"hljs-comment\">// Click on checkbox a</span>\nonChange.reset();\nReact.addons.TestUtils.Simulate.change(aInput);\nonChange.calledWith([]).should.equal(<span class=\"hljs-literal\">true</span>);\n<span class=\"hljs-comment\">// Click on checkbox b</span>\nonChange.reset();\nReact.addons.TestUtils.Simulate.change(bInput);\nonChange.calledWith([<span class=\"hljs-string\">\"b\"</span>]).should.equal(<span class=\"hljs-literal\">true</span>);\n<span class=\"hljs-comment\">// Click on checkbox c</span>\nonChange.reset();\nReact.addons.TestUtils.Simulate.change(cInput);\nonChange.calledWith([<span class=\"hljs-string\">\"b\"</span>, <span class=\"hljs-string\">\"c\"</span>]).should.equal(<span class=\"hljs-literal\">true</span>);",
            "isRoot": false,
            "uuid": "32214fdb-3a3a-41fe-8494-e376fc4a8a6d",
            "parentUUID": "3b5137c9-afb8-42b3-995d-1715efdb268b",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/tests/unit/inputs/multiselect.jsx",
        "uuid": "3b5137c9-afb8-42b3-995d-1715efdb268b",
        "fullFile": "/Users/pscanf/mondora/tcomb-input-collection/tests/unit/inputs/multiselect.jsx",
        "passes": [
          "[Circular ~.suites.suites.0.tests.0]",
          "[Circular ~.suites.suites.0.tests.1]",
          "[Circular ~.suites.suites.0.tests.2]",
          "[Circular ~.suites.suites.0.tests.3]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 4,
        "totalPasses": 4,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 35
      },
      {
        "title": "SimpleStringList",
        "suites": [],
        "tests": [
          {
            "title": "should contain a text input",
            "fullTitle": "SimpleStringList should contain a text input",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> input = u.findRenderedDOMComponentWithTag(\n    u.renderIntoDocument(React.createElement(SimpleStringList, {ctx: {}})),\n    <span class=\"hljs-string\">\"input\"</span>\n);\ninput.props.type.should.equal(<span class=\"hljs-string\">\"text\"</span>);",
            "isRoot": false,
            "uuid": "935d61db-f42e-4de4-9db6-3068216b9b23",
            "parentUUID": "23d501ee-a745-40a8-baf9-5a0f94340c63",
            "skipped": false
          },
          {
            "title": "should contain a button",
            "fullTitle": "SimpleStringList should contain a button",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "u.findRenderedDOMComponentWithTag(\n    u.renderIntoDocument(React.createElement(SimpleStringList, {ctx: {}})),\n    <span class=\"hljs-string\">\"button\"</span>\n);",
            "isRoot": false,
            "uuid": "b0e744cb-9e43-43f9-801e-3509a5a848b7",
            "parentUUID": "23d501ee-a745-40a8-baf9-5a0f94340c63",
            "skipped": false
          },
          {
            "title": "should add strings on button click",
            "fullTitle": "SimpleStringList should add strings on button click",
            "timedOut": false,
            "duration": 12,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> onChange = sinon.spy();\n<span class=\"hljs-keyword\">var</span> simpleStringList = u.renderIntoDocument(React.createElement(SimpleStringList, {ctx: {}, onChange: onChange}));\nsimpleStringList.getDOMNode().innerHTML.should.not.match(reg(<span class=\"hljs-string\">\"My string\"</span>));\n<span class=\"hljs-keyword\">var</span> input = u.findRenderedDOMComponentWithTag(simpleStringList, <span class=\"hljs-string\">\"input\"</span>).getDOMNode();\n<span class=\"hljs-keyword\">var</span> button = u.findRenderedDOMComponentWithTag(simpleStringList, <span class=\"hljs-string\">\"button\"</span>).getDOMNode();\nReact.addons.TestUtils.Simulate.change(input, {target: {value: <span class=\"hljs-string\">\"My string\"</span>}});\ninput.value.should.equal(<span class=\"hljs-string\">\"My string\"</span>);\nReact.addons.TestUtils.Simulate.click(button);\nonChange.called.should.equal(<span class=\"hljs-literal\">true</span>);\nsimpleStringList.getDOMNode().innerHTML.should.match(reg(<span class=\"hljs-string\">\"My string\"</span>));\ninput.value.should.equal(<span class=\"hljs-string\">\"\"</span>);",
            "isRoot": false,
            "uuid": "e10c7873-6b37-4c9f-a7f2-0cc641612b8d",
            "parentUUID": "23d501ee-a745-40a8-baf9-5a0f94340c63",
            "skipped": false
          },
          {
            "title": "should add strings on enter",
            "fullTitle": "SimpleStringList should add strings on enter",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> onChange = sinon.spy();\n<span class=\"hljs-keyword\">var</span> simpleStringList = u.renderIntoDocument(React.createElement(SimpleStringList, {ctx: {}, onChange: onChange}));\nsimpleStringList.getDOMNode().innerHTML.should.not.match(reg(<span class=\"hljs-string\">\"My string\"</span>));\n<span class=\"hljs-keyword\">var</span> input = u.findRenderedDOMComponentWithTag(simpleStringList, <span class=\"hljs-string\">\"input\"</span>).getDOMNode();\nReact.addons.TestUtils.Simulate.change(input, {target: {value: <span class=\"hljs-string\">\"My string\"</span>}});\ninput.value.should.equal(<span class=\"hljs-string\">\"My string\"</span>);\nReact.addons.TestUtils.Simulate.keyPress(input, {key: <span class=\"hljs-string\">\"Enter\"</span>});\nonChange.called.should.equal(<span class=\"hljs-literal\">true</span>);\nsimpleStringList.getDOMNode().innerHTML.should.match(reg(<span class=\"hljs-string\">\"My string\"</span>));\ninput.value.should.equal(<span class=\"hljs-string\">\"\"</span>);",
            "isRoot": false,
            "uuid": "42fcf6a0-eecd-4a94-aae4-94bb24f8753a",
            "parentUUID": "23d501ee-a745-40a8-baf9-5a0f94340c63",
            "skipped": false
          },
          {
            "title": "should remove strings",
            "fullTitle": "SimpleStringList should remove strings",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> onChange = sinon.spy();\n<span class=\"hljs-keyword\">var</span> simpleStringList = u.renderIntoDocument(React.createElement(SimpleStringList, {ctx: {}, onChange: onChange, value: [<span class=\"hljs-string\">\"My string\"</span>]}));\nsimpleStringList.getDOMNode().innerHTML.should.match(reg(<span class=\"hljs-string\">\"My string\"</span>));\n<span class=\"hljs-keyword\">var</span> strings = u.findAllInRenderedTree(simpleStringList, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(node)</span> </span>{\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"hljs-keyword\">typeof</span> node.props.onClick === <span class=\"hljs-string\">\"function\"</span> &amp;&amp;\n        node.props.type !== <span class=\"hljs-string\">\"button\"</span>\n    );\n});\n<span class=\"hljs-keyword\">var</span> string = strings[<span class=\"hljs-number\">0</span>].getDOMNode();\nReact.addons.TestUtils.Simulate.click(string);\nonChange.called.should.equal(<span class=\"hljs-literal\">true</span>);\nsimpleStringList.getDOMNode().innerHTML.should.not.match(reg(<span class=\"hljs-string\">\"My string\"</span>));",
            "isRoot": false,
            "uuid": "e587e14f-e718-43e8-a873-c36bb4e3d3df",
            "parentUUID": "23d501ee-a745-40a8-baf9-5a0f94340c63",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/tests/unit/inputs/simple-string-list.jsx",
        "uuid": "23d501ee-a745-40a8-baf9-5a0f94340c63",
        "fullFile": "/Users/pscanf/mondora/tcomb-input-collection/tests/unit/inputs/simple-string-list.jsx",
        "passes": [
          "[Circular ~.suites.suites.1.tests.0]",
          "[Circular ~.suites.suites.1.tests.1]",
          "[Circular ~.suites.suites.1.tests.2]",
          "[Circular ~.suites.suites.1.tests.3]",
          "[Circular ~.suites.suites.1.tests.4]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 5,
        "totalPasses": 5,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 42
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "ff7f2747-d178-4560-ad65-394f5c62faba",
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "should contain checkboxes",
      "fullTitle": "Multiselect should contain checkboxes",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "checkboxes.length.should.equal(<span class=\"hljs-number\">3</span>);\ncheckboxes.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(checkbox)</span> </span>{\n    checkbox.props.type.should.equal(<span class=\"hljs-string\">\"checkbox\"</span>);\n});",
      "isRoot": false,
      "uuid": "ede54ffc-a71e-4541-b304-90ca367ae67b",
      "parentUUID": "3b5137c9-afb8-42b3-995d-1715efdb268b",
      "skipped": false
    },
    {
      "title": "should render checkboxes with the correct checked status based on the value passed to the component",
      "fullTitle": "Multiselect should render checkboxes with the correct checked status based on the value passed to the component",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> aInput = checkboxes[<span class=\"hljs-number\">0</span>].getDOMNode();\n<span class=\"hljs-keyword\">var</span> bInput = checkboxes[<span class=\"hljs-number\">1</span>].getDOMNode();\n<span class=\"hljs-keyword\">var</span> cInput = checkboxes[<span class=\"hljs-number\">2</span>].getDOMNode();\naInput.checked.should.equal(<span class=\"hljs-literal\">true</span>);\nbInput.checked.should.equal(<span class=\"hljs-literal\">false</span>);\ncInput.checked.should.equal(<span class=\"hljs-literal\">false</span>);",
      "isRoot": false,
      "uuid": "84828e58-140d-4a03-94e6-898954f4b88f",
      "parentUUID": "3b5137c9-afb8-42b3-995d-1715efdb268b",
      "skipped": false
    },
    {
      "title": "should change checked status on checkbox click",
      "fullTitle": "Multiselect should change checked status on checkbox click",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> aInput = checkboxes[<span class=\"hljs-number\">0</span>].getDOMNode();\n<span class=\"hljs-keyword\">var</span> bInput = checkboxes[<span class=\"hljs-number\">1</span>].getDOMNode();\n<span class=\"hljs-keyword\">var</span> cInput = checkboxes[<span class=\"hljs-number\">2</span>].getDOMNode();\nReact.addons.TestUtils.Simulate.change(aInput);\nReact.addons.TestUtils.Simulate.change(bInput);\nReact.addons.TestUtils.Simulate.change(cInput);\naInput.checked.should.equal(<span class=\"hljs-literal\">false</span>);\nbInput.checked.should.equal(<span class=\"hljs-literal\">true</span>);\ncInput.checked.should.equal(<span class=\"hljs-literal\">true</span>);\nReact.addons.TestUtils.Simulate.change(aInput);\nReact.addons.TestUtils.Simulate.change(bInput);\nReact.addons.TestUtils.Simulate.change(cInput);\naInput.checked.should.equal(<span class=\"hljs-literal\">true</span>);\nbInput.checked.should.equal(<span class=\"hljs-literal\">false</span>);\ncInput.checked.should.equal(<span class=\"hljs-literal\">false</span>);",
      "isRoot": false,
      "uuid": "a9f8e636-2497-4ea2-89ca-7e87f342cfd8",
      "parentUUID": "3b5137c9-afb8-42b3-995d-1715efdb268b",
      "skipped": false
    },
    {
      "title": "should call onChange with the new status",
      "fullTitle": "Multiselect should call onChange with the new status",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> aInput = checkboxes[<span class=\"hljs-number\">0</span>].getDOMNode();\n<span class=\"hljs-keyword\">var</span> bInput = checkboxes[<span class=\"hljs-number\">1</span>].getDOMNode();\n<span class=\"hljs-keyword\">var</span> cInput = checkboxes[<span class=\"hljs-number\">2</span>].getDOMNode();\n<span class=\"hljs-comment\">// Click on checkbox a</span>\nonChange.reset();\nReact.addons.TestUtils.Simulate.change(aInput);\nonChange.calledWith([]).should.equal(<span class=\"hljs-literal\">true</span>);\n<span class=\"hljs-comment\">// Click on checkbox b</span>\nonChange.reset();\nReact.addons.TestUtils.Simulate.change(bInput);\nonChange.calledWith([<span class=\"hljs-string\">\"b\"</span>]).should.equal(<span class=\"hljs-literal\">true</span>);\n<span class=\"hljs-comment\">// Click on checkbox c</span>\nonChange.reset();\nReact.addons.TestUtils.Simulate.change(cInput);\nonChange.calledWith([<span class=\"hljs-string\">\"b\"</span>, <span class=\"hljs-string\">\"c\"</span>]).should.equal(<span class=\"hljs-literal\">true</span>);",
      "isRoot": false,
      "uuid": "a39738e8-9f07-4553-81e5-a9b575d0a55b",
      "parentUUID": "3b5137c9-afb8-42b3-995d-1715efdb268b",
      "skipped": false
    },
    {
      "title": "should contain a text input",
      "fullTitle": "SimpleStringList should contain a text input",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> input = u.findRenderedDOMComponentWithTag(\n    u.renderIntoDocument(React.createElement(SimpleStringList, {ctx: {}})),\n    <span class=\"hljs-string\">\"input\"</span>\n);\ninput.props.type.should.equal(<span class=\"hljs-string\">\"text\"</span>);",
      "isRoot": false,
      "uuid": "97d1e0b0-865c-4659-b1c9-5de54a499214",
      "parentUUID": "23d501ee-a745-40a8-baf9-5a0f94340c63",
      "skipped": false
    },
    {
      "title": "should contain a button",
      "fullTitle": "SimpleStringList should contain a button",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "u.findRenderedDOMComponentWithTag(\n    u.renderIntoDocument(React.createElement(SimpleStringList, {ctx: {}})),\n    <span class=\"hljs-string\">\"button\"</span>\n);",
      "isRoot": false,
      "uuid": "d820d601-f021-4d53-b7fd-f7db732d2225",
      "parentUUID": "23d501ee-a745-40a8-baf9-5a0f94340c63",
      "skipped": false
    },
    {
      "title": "should add strings on button click",
      "fullTitle": "SimpleStringList should add strings on button click",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> onChange = sinon.spy();\n<span class=\"hljs-keyword\">var</span> simpleStringList = u.renderIntoDocument(React.createElement(SimpleStringList, {ctx: {}, onChange: onChange}));\nsimpleStringList.getDOMNode().innerHTML.should.not.match(reg(<span class=\"hljs-string\">\"My string\"</span>));\n<span class=\"hljs-keyword\">var</span> input = u.findRenderedDOMComponentWithTag(simpleStringList, <span class=\"hljs-string\">\"input\"</span>).getDOMNode();\n<span class=\"hljs-keyword\">var</span> button = u.findRenderedDOMComponentWithTag(simpleStringList, <span class=\"hljs-string\">\"button\"</span>).getDOMNode();\nReact.addons.TestUtils.Simulate.change(input, {target: {value: <span class=\"hljs-string\">\"My string\"</span>}});\ninput.value.should.equal(<span class=\"hljs-string\">\"My string\"</span>);\nReact.addons.TestUtils.Simulate.click(button);\nonChange.called.should.equal(<span class=\"hljs-literal\">true</span>);\nsimpleStringList.getDOMNode().innerHTML.should.match(reg(<span class=\"hljs-string\">\"My string\"</span>));\ninput.value.should.equal(<span class=\"hljs-string\">\"\"</span>);",
      "isRoot": false,
      "uuid": "6ee3207d-c141-478d-b408-8eacacdc1220",
      "parentUUID": "23d501ee-a745-40a8-baf9-5a0f94340c63",
      "skipped": false
    },
    {
      "title": "should add strings on enter",
      "fullTitle": "SimpleStringList should add strings on enter",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> onChange = sinon.spy();\n<span class=\"hljs-keyword\">var</span> simpleStringList = u.renderIntoDocument(React.createElement(SimpleStringList, {ctx: {}, onChange: onChange}));\nsimpleStringList.getDOMNode().innerHTML.should.not.match(reg(<span class=\"hljs-string\">\"My string\"</span>));\n<span class=\"hljs-keyword\">var</span> input = u.findRenderedDOMComponentWithTag(simpleStringList, <span class=\"hljs-string\">\"input\"</span>).getDOMNode();\nReact.addons.TestUtils.Simulate.change(input, {target: {value: <span class=\"hljs-string\">\"My string\"</span>}});\ninput.value.should.equal(<span class=\"hljs-string\">\"My string\"</span>);\nReact.addons.TestUtils.Simulate.keyPress(input, {key: <span class=\"hljs-string\">\"Enter\"</span>});\nonChange.called.should.equal(<span class=\"hljs-literal\">true</span>);\nsimpleStringList.getDOMNode().innerHTML.should.match(reg(<span class=\"hljs-string\">\"My string\"</span>));\ninput.value.should.equal(<span class=\"hljs-string\">\"\"</span>);",
      "isRoot": false,
      "uuid": "504735e3-4bbc-4827-bd92-d2d1fc03209f",
      "parentUUID": "23d501ee-a745-40a8-baf9-5a0f94340c63",
      "skipped": false
    },
    {
      "title": "should remove strings",
      "fullTitle": "SimpleStringList should remove strings",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> onChange = sinon.spy();\n<span class=\"hljs-keyword\">var</span> simpleStringList = u.renderIntoDocument(React.createElement(SimpleStringList, {ctx: {}, onChange: onChange, value: [<span class=\"hljs-string\">\"My string\"</span>]}));\nsimpleStringList.getDOMNode().innerHTML.should.match(reg(<span class=\"hljs-string\">\"My string\"</span>));\n<span class=\"hljs-keyword\">var</span> strings = u.findAllInRenderedTree(simpleStringList, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(node)</span> </span>{\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"hljs-keyword\">typeof</span> node.props.onClick === <span class=\"hljs-string\">\"function\"</span> &amp;&amp;\n        node.props.type !== <span class=\"hljs-string\">\"button\"</span>\n    );\n});\n<span class=\"hljs-keyword\">var</span> string = strings[<span class=\"hljs-number\">0</span>].getDOMNode();\nReact.addons.TestUtils.Simulate.click(string);\nonChange.called.should.equal(<span class=\"hljs-literal\">true</span>);\nsimpleStringList.getDOMNode().innerHTML.should.not.match(reg(<span class=\"hljs-string\">\"My string\"</span>));",
      "isRoot": false,
      "uuid": "47b57959-5e4c-45b3-9098-433564d83f66",
      "parentUUID": "23d501ee-a745-40a8-baf9-5a0f94340c63",
      "skipped": false
    }
  ],
  "allHooks": [
    {
      "title": "\"before each\" hook",
      "async": 0,
      "sync": true,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": "[Circular ~.suites.suites.0]",
      "ctx": {
        "_runnable": {
          "title": "should call onChange with the new status",
          "async": 0,
          "sync": true,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/Users/pscanf/mondora/tcomb-input-collection/tests/unit/inputs/multiselect.jsx",
          "parent": "[Circular ~.suites.suites.0]",
          "ctx": "[Circular ~.allHooks.0.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "duration": 7,
          "state": "passed",
          "speed": "fast"
        },
        "test": "[Circular ~.allHooks.0.ctx._runnable]"
      },
      "_events": {},
      "_eventsCount": 0,
      "duration": 11,
      "_error": null
    },
    "[Circular ~.allHooks.0]",
    "[Circular ~.allHooks.0]",
    "[Circular ~.allHooks.0]"
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "should contain checkboxes",
      "fullTitle": "Multiselect should contain checkboxes",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "checkboxes.length.should.equal(<span class=\"hljs-number\">3</span>);\ncheckboxes.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(checkbox)</span> </span>{\n    checkbox.props.type.should.equal(<span class=\"hljs-string\">\"checkbox\"</span>);\n});",
      "isRoot": false,
      "uuid": "3757b937-a02f-4fa3-93b9-a6d76802573a",
      "parentUUID": "3b5137c9-afb8-42b3-995d-1715efdb268b",
      "skipped": false
    },
    {
      "title": "should render checkboxes with the correct checked status based on the value passed to the component",
      "fullTitle": "Multiselect should render checkboxes with the correct checked status based on the value passed to the component",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> aInput = checkboxes[<span class=\"hljs-number\">0</span>].getDOMNode();\n<span class=\"hljs-keyword\">var</span> bInput = checkboxes[<span class=\"hljs-number\">1</span>].getDOMNode();\n<span class=\"hljs-keyword\">var</span> cInput = checkboxes[<span class=\"hljs-number\">2</span>].getDOMNode();\naInput.checked.should.equal(<span class=\"hljs-literal\">true</span>);\nbInput.checked.should.equal(<span class=\"hljs-literal\">false</span>);\ncInput.checked.should.equal(<span class=\"hljs-literal\">false</span>);",
      "isRoot": false,
      "uuid": "7be5b616-ce50-4196-b185-2d5c6eadac12",
      "parentUUID": "3b5137c9-afb8-42b3-995d-1715efdb268b",
      "skipped": false
    },
    {
      "title": "should change checked status on checkbox click",
      "fullTitle": "Multiselect should change checked status on checkbox click",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> aInput = checkboxes[<span class=\"hljs-number\">0</span>].getDOMNode();\n<span class=\"hljs-keyword\">var</span> bInput = checkboxes[<span class=\"hljs-number\">1</span>].getDOMNode();\n<span class=\"hljs-keyword\">var</span> cInput = checkboxes[<span class=\"hljs-number\">2</span>].getDOMNode();\nReact.addons.TestUtils.Simulate.change(aInput);\nReact.addons.TestUtils.Simulate.change(bInput);\nReact.addons.TestUtils.Simulate.change(cInput);\naInput.checked.should.equal(<span class=\"hljs-literal\">false</span>);\nbInput.checked.should.equal(<span class=\"hljs-literal\">true</span>);\ncInput.checked.should.equal(<span class=\"hljs-literal\">true</span>);\nReact.addons.TestUtils.Simulate.change(aInput);\nReact.addons.TestUtils.Simulate.change(bInput);\nReact.addons.TestUtils.Simulate.change(cInput);\naInput.checked.should.equal(<span class=\"hljs-literal\">true</span>);\nbInput.checked.should.equal(<span class=\"hljs-literal\">false</span>);\ncInput.checked.should.equal(<span class=\"hljs-literal\">false</span>);",
      "isRoot": false,
      "uuid": "ac4d4427-61fd-4b7c-99a8-e75bafc578c9",
      "parentUUID": "3b5137c9-afb8-42b3-995d-1715efdb268b",
      "skipped": false
    },
    {
      "title": "should call onChange with the new status",
      "fullTitle": "Multiselect should call onChange with the new status",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> aInput = checkboxes[<span class=\"hljs-number\">0</span>].getDOMNode();\n<span class=\"hljs-keyword\">var</span> bInput = checkboxes[<span class=\"hljs-number\">1</span>].getDOMNode();\n<span class=\"hljs-keyword\">var</span> cInput = checkboxes[<span class=\"hljs-number\">2</span>].getDOMNode();\n<span class=\"hljs-comment\">// Click on checkbox a</span>\nonChange.reset();\nReact.addons.TestUtils.Simulate.change(aInput);\nonChange.calledWith([]).should.equal(<span class=\"hljs-literal\">true</span>);\n<span class=\"hljs-comment\">// Click on checkbox b</span>\nonChange.reset();\nReact.addons.TestUtils.Simulate.change(bInput);\nonChange.calledWith([<span class=\"hljs-string\">\"b\"</span>]).should.equal(<span class=\"hljs-literal\">true</span>);\n<span class=\"hljs-comment\">// Click on checkbox c</span>\nonChange.reset();\nReact.addons.TestUtils.Simulate.change(cInput);\nonChange.calledWith([<span class=\"hljs-string\">\"b\"</span>, <span class=\"hljs-string\">\"c\"</span>]).should.equal(<span class=\"hljs-literal\">true</span>);",
      "isRoot": false,
      "uuid": "e2e3d87a-3507-4d10-8a45-02ca6b0f535d",
      "parentUUID": "3b5137c9-afb8-42b3-995d-1715efdb268b",
      "skipped": false
    },
    {
      "title": "should contain a text input",
      "fullTitle": "SimpleStringList should contain a text input",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> input = u.findRenderedDOMComponentWithTag(\n    u.renderIntoDocument(React.createElement(SimpleStringList, {ctx: {}})),\n    <span class=\"hljs-string\">\"input\"</span>\n);\ninput.props.type.should.equal(<span class=\"hljs-string\">\"text\"</span>);",
      "isRoot": false,
      "uuid": "f9a93d03-d3cf-432b-ac4d-6eee88f65693",
      "parentUUID": "23d501ee-a745-40a8-baf9-5a0f94340c63",
      "skipped": false
    },
    {
      "title": "should contain a button",
      "fullTitle": "SimpleStringList should contain a button",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "u.findRenderedDOMComponentWithTag(\n    u.renderIntoDocument(React.createElement(SimpleStringList, {ctx: {}})),\n    <span class=\"hljs-string\">\"button\"</span>\n);",
      "isRoot": false,
      "uuid": "74c98c14-a56b-4144-9168-b5eff295ab90",
      "parentUUID": "23d501ee-a745-40a8-baf9-5a0f94340c63",
      "skipped": false
    },
    {
      "title": "should add strings on button click",
      "fullTitle": "SimpleStringList should add strings on button click",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> onChange = sinon.spy();\n<span class=\"hljs-keyword\">var</span> simpleStringList = u.renderIntoDocument(React.createElement(SimpleStringList, {ctx: {}, onChange: onChange}));\nsimpleStringList.getDOMNode().innerHTML.should.not.match(reg(<span class=\"hljs-string\">\"My string\"</span>));\n<span class=\"hljs-keyword\">var</span> input = u.findRenderedDOMComponentWithTag(simpleStringList, <span class=\"hljs-string\">\"input\"</span>).getDOMNode();\n<span class=\"hljs-keyword\">var</span> button = u.findRenderedDOMComponentWithTag(simpleStringList, <span class=\"hljs-string\">\"button\"</span>).getDOMNode();\nReact.addons.TestUtils.Simulate.change(input, {target: {value: <span class=\"hljs-string\">\"My string\"</span>}});\ninput.value.should.equal(<span class=\"hljs-string\">\"My string\"</span>);\nReact.addons.TestUtils.Simulate.click(button);\nonChange.called.should.equal(<span class=\"hljs-literal\">true</span>);\nsimpleStringList.getDOMNode().innerHTML.should.match(reg(<span class=\"hljs-string\">\"My string\"</span>));\ninput.value.should.equal(<span class=\"hljs-string\">\"\"</span>);",
      "isRoot": false,
      "uuid": "1adb6c2d-3fd2-4534-af27-45f921130208",
      "parentUUID": "23d501ee-a745-40a8-baf9-5a0f94340c63",
      "skipped": false
    },
    {
      "title": "should add strings on enter",
      "fullTitle": "SimpleStringList should add strings on enter",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> onChange = sinon.spy();\n<span class=\"hljs-keyword\">var</span> simpleStringList = u.renderIntoDocument(React.createElement(SimpleStringList, {ctx: {}, onChange: onChange}));\nsimpleStringList.getDOMNode().innerHTML.should.not.match(reg(<span class=\"hljs-string\">\"My string\"</span>));\n<span class=\"hljs-keyword\">var</span> input = u.findRenderedDOMComponentWithTag(simpleStringList, <span class=\"hljs-string\">\"input\"</span>).getDOMNode();\nReact.addons.TestUtils.Simulate.change(input, {target: {value: <span class=\"hljs-string\">\"My string\"</span>}});\ninput.value.should.equal(<span class=\"hljs-string\">\"My string\"</span>);\nReact.addons.TestUtils.Simulate.keyPress(input, {key: <span class=\"hljs-string\">\"Enter\"</span>});\nonChange.called.should.equal(<span class=\"hljs-literal\">true</span>);\nsimpleStringList.getDOMNode().innerHTML.should.match(reg(<span class=\"hljs-string\">\"My string\"</span>));\ninput.value.should.equal(<span class=\"hljs-string\">\"\"</span>);",
      "isRoot": false,
      "uuid": "c87e7041-d28a-44c0-a657-18ae65a13993",
      "parentUUID": "23d501ee-a745-40a8-baf9-5a0f94340c63",
      "skipped": false
    },
    {
      "title": "should remove strings",
      "fullTitle": "SimpleStringList should remove strings",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> onChange = sinon.spy();\n<span class=\"hljs-keyword\">var</span> simpleStringList = u.renderIntoDocument(React.createElement(SimpleStringList, {ctx: {}, onChange: onChange, value: [<span class=\"hljs-string\">\"My string\"</span>]}));\nsimpleStringList.getDOMNode().innerHTML.should.match(reg(<span class=\"hljs-string\">\"My string\"</span>));\n<span class=\"hljs-keyword\">var</span> strings = u.findAllInRenderedTree(simpleStringList, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(node)</span> </span>{\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"hljs-keyword\">typeof</span> node.props.onClick === <span class=\"hljs-string\">\"function\"</span> &amp;&amp;\n        node.props.type !== <span class=\"hljs-string\">\"button\"</span>\n    );\n});\n<span class=\"hljs-keyword\">var</span> string = strings[<span class=\"hljs-number\">0</span>].getDOMNode();\nReact.addons.TestUtils.Simulate.click(string);\nonChange.called.should.equal(<span class=\"hljs-literal\">true</span>);\nsimpleStringList.getDOMNode().innerHTML.should.not.match(reg(<span class=\"hljs-string\">\"My string\"</span>));",
      "isRoot": false,
      "uuid": "de336308-1981-4bd5-8320-088f8e4e0ce0",
      "parentUUID": "23d501ee-a745-40a8-baf9-5a0f94340c63",
      "skipped": false
    }
  ],
  "allFailures": []
}