{
  "reportTitle": "tcomb-input-collection",
  "stats": {
    "suites": 2,
    "tests": 9,
    "passes": 9,
    "pending": 0,
    "failures": 0,
    "start": "2015-05-12T21:39:39.434Z",
    "end": "2015-05-12T21:39:39.573Z",
    "duration": 139,
    "testsRegistered": 9,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Multiselect",
        "suites": [],
        "tests": [
          {
            "title": "should contain checkboxes",
            "fullTitle": "Multiselect should contain checkboxes",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "checkboxes.length.should.equal(<span class=\"hljs-number\">3</span>);\ncheckboxes.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(checkbox)</span> </span>{\n    checkbox.props.type.should.equal(<span class=\"hljs-string\">\"checkbox\"</span>);\n});",
            "isRoot": false,
            "uuid": "6ece4618-32d3-45a8-b433-53323706f57f",
            "parentUUID": "40f90b62-8e9a-4b3f-98d0-93d1c77fa950",
            "skipped": false
          },
          {
            "title": "should render checkboxes with the correct checked status based on the value passed to the component",
            "fullTitle": "Multiselect should render checkboxes with the correct checked status based on the value passed to the component",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> aInput = checkboxes[<span class=\"hljs-number\">0</span>].getDOMNode();\n<span class=\"hljs-keyword\">var</span> bInput = checkboxes[<span class=\"hljs-number\">1</span>].getDOMNode();\n<span class=\"hljs-keyword\">var</span> cInput = checkboxes[<span class=\"hljs-number\">2</span>].getDOMNode();\naInput.checked.should.equal(<span class=\"hljs-literal\">true</span>);\nbInput.checked.should.equal(<span class=\"hljs-literal\">false</span>);\ncInput.checked.should.equal(<span class=\"hljs-literal\">false</span>);",
            "isRoot": false,
            "uuid": "de991e07-8fff-4866-b298-4570eb36bc37",
            "parentUUID": "40f90b62-8e9a-4b3f-98d0-93d1c77fa950",
            "skipped": false
          },
          {
            "title": "should change checked status on checkbox click",
            "fullTitle": "Multiselect should change checked status on checkbox click",
            "timedOut": false,
            "duration": 19,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> aInput = checkboxes[<span class=\"hljs-number\">0</span>].getDOMNode();\n<span class=\"hljs-keyword\">var</span> bInput = checkboxes[<span class=\"hljs-number\">1</span>].getDOMNode();\n<span class=\"hljs-keyword\">var</span> cInput = checkboxes[<span class=\"hljs-number\">2</span>].getDOMNode();\nReact.addons.TestUtils.Simulate.change(aInput);\nReact.addons.TestUtils.Simulate.change(bInput);\nReact.addons.TestUtils.Simulate.change(cInput);\naInput.checked.should.equal(<span class=\"hljs-literal\">false</span>);\nbInput.checked.should.equal(<span class=\"hljs-literal\">true</span>);\ncInput.checked.should.equal(<span class=\"hljs-literal\">true</span>);\nReact.addons.TestUtils.Simulate.change(aInput);\nReact.addons.TestUtils.Simulate.change(bInput);\nReact.addons.TestUtils.Simulate.change(cInput);\naInput.checked.should.equal(<span class=\"hljs-literal\">true</span>);\nbInput.checked.should.equal(<span class=\"hljs-literal\">false</span>);\ncInput.checked.should.equal(<span class=\"hljs-literal\">false</span>);",
            "isRoot": false,
            "uuid": "620cab79-2d53-4f18-b174-6b644481cd6e",
            "parentUUID": "40f90b62-8e9a-4b3f-98d0-93d1c77fa950",
            "skipped": false
          },
          {
            "title": "should call onChange with the new status",
            "fullTitle": "Multiselect should call onChange with the new status",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> aInput = checkboxes[<span class=\"hljs-number\">0</span>].getDOMNode();\n<span class=\"hljs-keyword\">var</span> bInput = checkboxes[<span class=\"hljs-number\">1</span>].getDOMNode();\n<span class=\"hljs-keyword\">var</span> cInput = checkboxes[<span class=\"hljs-number\">2</span>].getDOMNode();\n<span class=\"hljs-comment\">// Click on checkbox a</span>\nonChange.reset();\nReact.addons.TestUtils.Simulate.change(aInput);\nonChange.calledWith([]).should.equal(<span class=\"hljs-literal\">true</span>);\n<span class=\"hljs-comment\">// Click on checkbox b</span>\nonChange.reset();\nReact.addons.TestUtils.Simulate.change(bInput);\nonChange.calledWith([<span class=\"hljs-string\">\"b\"</span>]).should.equal(<span class=\"hljs-literal\">true</span>);\n<span class=\"hljs-comment\">// Click on checkbox c</span>\nonChange.reset();\nReact.addons.TestUtils.Simulate.change(cInput);\nonChange.calledWith([<span class=\"hljs-string\">\"b\"</span>, <span class=\"hljs-string\">\"c\"</span>]).should.equal(<span class=\"hljs-literal\">true</span>);",
            "isRoot": false,
            "uuid": "9386b6c5-362b-4fd6-9065-964ff08b8471",
            "parentUUID": "40f90b62-8e9a-4b3f-98d0-93d1c77fa950",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/tests/unit/inputs/multiselect.jsx",
        "uuid": "40f90b62-8e9a-4b3f-98d0-93d1c77fa950",
        "fullFile": "/Users/pscanf/mondora/tcomb-input-collection/tests/unit/inputs/multiselect.jsx",
        "passes": [
          "[Circular ~.suites.suites.0.tests.0]",
          "[Circular ~.suites.suites.0.tests.1]",
          "[Circular ~.suites.suites.0.tests.2]",
          "[Circular ~.suites.suites.0.tests.3]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 4,
        "totalPasses": 4,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 26
      },
      {
        "title": "SimpleStringList",
        "suites": [],
        "tests": [
          {
            "title": "should contain a text input",
            "fullTitle": "SimpleStringList should contain a text input",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> input = u.findRenderedDOMComponentWithTag(\n    u.renderIntoDocument(React.createElement(SimpleStringList, {ctx: {}})),\n    <span class=\"hljs-string\">\"input\"</span>\n);\ninput.props.type.should.equal(<span class=\"hljs-string\">\"text\"</span>);",
            "isRoot": false,
            "uuid": "9e4412dd-7172-4503-8ea7-981b4ca5326c",
            "parentUUID": "729e9df4-b26b-4028-a3a5-ecde5bc2995c",
            "skipped": false
          },
          {
            "title": "should contain a button",
            "fullTitle": "SimpleStringList should contain a button",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "u.findRenderedDOMComponentWithTag(\n    u.renderIntoDocument(React.createElement(SimpleStringList, {ctx: {}})),\n    <span class=\"hljs-string\">\"button\"</span>\n);",
            "isRoot": false,
            "uuid": "68ea1331-e601-4e65-91ab-c4ed8bef42de",
            "parentUUID": "729e9df4-b26b-4028-a3a5-ecde5bc2995c",
            "skipped": false
          },
          {
            "title": "should add strings on button click",
            "fullTitle": "SimpleStringList should add strings on button click",
            "timedOut": false,
            "duration": 13,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> onChange = sinon.spy();\n<span class=\"hljs-keyword\">var</span> simpleStringList = u.renderIntoDocument(React.createElement(SimpleStringList, {ctx: {}, onChange: onChange}));\nsimpleStringList.getDOMNode().innerHTML.should.not.match(reg(<span class=\"hljs-string\">\"My string\"</span>));\n<span class=\"hljs-keyword\">var</span> input = u.findRenderedDOMComponentWithTag(simpleStringList, <span class=\"hljs-string\">\"input\"</span>).getDOMNode();\n<span class=\"hljs-keyword\">var</span> button = u.findRenderedDOMComponentWithTag(simpleStringList, <span class=\"hljs-string\">\"button\"</span>).getDOMNode();\nReact.addons.TestUtils.Simulate.change(input, {target: {value: <span class=\"hljs-string\">\"My string\"</span>}});\ninput.value.should.equal(<span class=\"hljs-string\">\"My string\"</span>);\nReact.addons.TestUtils.Simulate.click(button);\nonChange.called.should.equal(<span class=\"hljs-literal\">true</span>);\nsimpleStringList.getDOMNode().innerHTML.should.match(reg(<span class=\"hljs-string\">\"My string\"</span>));\ninput.value.should.equal(<span class=\"hljs-string\">\"\"</span>);",
            "isRoot": false,
            "uuid": "cad0c5cd-fac9-4b85-91ed-d6372858c3a6",
            "parentUUID": "729e9df4-b26b-4028-a3a5-ecde5bc2995c",
            "skipped": false
          },
          {
            "title": "should add strings on enter",
            "fullTitle": "SimpleStringList should add strings on enter",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> onChange = sinon.spy();\n<span class=\"hljs-keyword\">var</span> simpleStringList = u.renderIntoDocument(React.createElement(SimpleStringList, {ctx: {}, onChange: onChange}));\nsimpleStringList.getDOMNode().innerHTML.should.not.match(reg(<span class=\"hljs-string\">\"My string\"</span>));\n<span class=\"hljs-keyword\">var</span> input = u.findRenderedDOMComponentWithTag(simpleStringList, <span class=\"hljs-string\">\"input\"</span>).getDOMNode();\nReact.addons.TestUtils.Simulate.change(input, {target: {value: <span class=\"hljs-string\">\"My string\"</span>}});\ninput.value.should.equal(<span class=\"hljs-string\">\"My string\"</span>);\nReact.addons.TestUtils.Simulate.keyPress(input, {key: <span class=\"hljs-string\">\"Enter\"</span>});\nonChange.called.should.equal(<span class=\"hljs-literal\">true</span>);\nsimpleStringList.getDOMNode().innerHTML.should.match(reg(<span class=\"hljs-string\">\"My string\"</span>));\ninput.value.should.equal(<span class=\"hljs-string\">\"\"</span>);",
            "isRoot": false,
            "uuid": "472e2609-da1c-4580-858f-4a97d3bd1161",
            "parentUUID": "729e9df4-b26b-4028-a3a5-ecde5bc2995c",
            "skipped": false
          },
          {
            "title": "should remove strings",
            "fullTitle": "SimpleStringList should remove strings",
            "timedOut": false,
            "duration": 12,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> onChange = sinon.spy();\n<span class=\"hljs-keyword\">var</span> simpleStringList = u.renderIntoDocument(React.createElement(SimpleStringList, {ctx: {}, onChange: onChange, value: [<span class=\"hljs-string\">\"My string\"</span>]}));\nsimpleStringList.getDOMNode().innerHTML.should.match(reg(<span class=\"hljs-string\">\"My string\"</span>));\n<span class=\"hljs-keyword\">var</span> strings = u.findAllInRenderedTree(simpleStringList, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(node)</span> </span>{\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"hljs-keyword\">typeof</span> node.props.onClick === <span class=\"hljs-string\">\"function\"</span> &amp;&amp;\n        node.props.type !== <span class=\"hljs-string\">\"button\"</span>\n    );\n});\n<span class=\"hljs-keyword\">var</span> string = strings[<span class=\"hljs-number\">0</span>].getDOMNode();\nReact.addons.TestUtils.Simulate.click(string);\nonChange.called.should.equal(<span class=\"hljs-literal\">true</span>);\nsimpleStringList.getDOMNode().innerHTML.should.not.match(reg(<span class=\"hljs-string\">\"My string\"</span>));",
            "isRoot": false,
            "uuid": "80dced84-94db-4a06-96cc-deafe3903047",
            "parentUUID": "729e9df4-b26b-4028-a3a5-ecde5bc2995c",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/tests/unit/inputs/simple-string-list.jsx",
        "uuid": "729e9df4-b26b-4028-a3a5-ecde5bc2995c",
        "fullFile": "/Users/pscanf/mondora/tcomb-input-collection/tests/unit/inputs/simple-string-list.jsx",
        "passes": [
          "[Circular ~.suites.suites.1.tests.0]",
          "[Circular ~.suites.suites.1.tests.1]",
          "[Circular ~.suites.suites.1.tests.2]",
          "[Circular ~.suites.suites.1.tests.3]",
          "[Circular ~.suites.suites.1.tests.4]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 5,
        "totalPasses": 5,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 45
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "200a0605-db62-430f-89c1-4cb2f4a8f968",
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "should contain checkboxes",
      "fullTitle": "Multiselect should contain checkboxes",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "checkboxes.length.should.equal(<span class=\"hljs-number\">3</span>);\ncheckboxes.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(checkbox)</span> </span>{\n    checkbox.props.type.should.equal(<span class=\"hljs-string\">\"checkbox\"</span>);\n});",
      "isRoot": false,
      "uuid": "3b9002e7-eea9-41e2-bae3-1b726581e6a7",
      "parentUUID": "40f90b62-8e9a-4b3f-98d0-93d1c77fa950",
      "skipped": false
    },
    {
      "title": "should render checkboxes with the correct checked status based on the value passed to the component",
      "fullTitle": "Multiselect should render checkboxes with the correct checked status based on the value passed to the component",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> aInput = checkboxes[<span class=\"hljs-number\">0</span>].getDOMNode();\n<span class=\"hljs-keyword\">var</span> bInput = checkboxes[<span class=\"hljs-number\">1</span>].getDOMNode();\n<span class=\"hljs-keyword\">var</span> cInput = checkboxes[<span class=\"hljs-number\">2</span>].getDOMNode();\naInput.checked.should.equal(<span class=\"hljs-literal\">true</span>);\nbInput.checked.should.equal(<span class=\"hljs-literal\">false</span>);\ncInput.checked.should.equal(<span class=\"hljs-literal\">false</span>);",
      "isRoot": false,
      "uuid": "07633828-ddd6-41c6-81a8-fe001d26af17",
      "parentUUID": "40f90b62-8e9a-4b3f-98d0-93d1c77fa950",
      "skipped": false
    },
    {
      "title": "should change checked status on checkbox click",
      "fullTitle": "Multiselect should change checked status on checkbox click",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> aInput = checkboxes[<span class=\"hljs-number\">0</span>].getDOMNode();\n<span class=\"hljs-keyword\">var</span> bInput = checkboxes[<span class=\"hljs-number\">1</span>].getDOMNode();\n<span class=\"hljs-keyword\">var</span> cInput = checkboxes[<span class=\"hljs-number\">2</span>].getDOMNode();\nReact.addons.TestUtils.Simulate.change(aInput);\nReact.addons.TestUtils.Simulate.change(bInput);\nReact.addons.TestUtils.Simulate.change(cInput);\naInput.checked.should.equal(<span class=\"hljs-literal\">false</span>);\nbInput.checked.should.equal(<span class=\"hljs-literal\">true</span>);\ncInput.checked.should.equal(<span class=\"hljs-literal\">true</span>);\nReact.addons.TestUtils.Simulate.change(aInput);\nReact.addons.TestUtils.Simulate.change(bInput);\nReact.addons.TestUtils.Simulate.change(cInput);\naInput.checked.should.equal(<span class=\"hljs-literal\">true</span>);\nbInput.checked.should.equal(<span class=\"hljs-literal\">false</span>);\ncInput.checked.should.equal(<span class=\"hljs-literal\">false</span>);",
      "isRoot": false,
      "uuid": "f3507807-2bf9-440c-8c90-a6aaba7ba6ba",
      "parentUUID": "40f90b62-8e9a-4b3f-98d0-93d1c77fa950",
      "skipped": false
    },
    {
      "title": "should call onChange with the new status",
      "fullTitle": "Multiselect should call onChange with the new status",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> aInput = checkboxes[<span class=\"hljs-number\">0</span>].getDOMNode();\n<span class=\"hljs-keyword\">var</span> bInput = checkboxes[<span class=\"hljs-number\">1</span>].getDOMNode();\n<span class=\"hljs-keyword\">var</span> cInput = checkboxes[<span class=\"hljs-number\">2</span>].getDOMNode();\n<span class=\"hljs-comment\">// Click on checkbox a</span>\nonChange.reset();\nReact.addons.TestUtils.Simulate.change(aInput);\nonChange.calledWith([]).should.equal(<span class=\"hljs-literal\">true</span>);\n<span class=\"hljs-comment\">// Click on checkbox b</span>\nonChange.reset();\nReact.addons.TestUtils.Simulate.change(bInput);\nonChange.calledWith([<span class=\"hljs-string\">\"b\"</span>]).should.equal(<span class=\"hljs-literal\">true</span>);\n<span class=\"hljs-comment\">// Click on checkbox c</span>\nonChange.reset();\nReact.addons.TestUtils.Simulate.change(cInput);\nonChange.calledWith([<span class=\"hljs-string\">\"b\"</span>, <span class=\"hljs-string\">\"c\"</span>]).should.equal(<span class=\"hljs-literal\">true</span>);",
      "isRoot": false,
      "uuid": "b0b046c6-fbbd-4d89-9e7f-6211f9a2eb69",
      "parentUUID": "40f90b62-8e9a-4b3f-98d0-93d1c77fa950",
      "skipped": false
    },
    {
      "title": "should contain a text input",
      "fullTitle": "SimpleStringList should contain a text input",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> input = u.findRenderedDOMComponentWithTag(\n    u.renderIntoDocument(React.createElement(SimpleStringList, {ctx: {}})),\n    <span class=\"hljs-string\">\"input\"</span>\n);\ninput.props.type.should.equal(<span class=\"hljs-string\">\"text\"</span>);",
      "isRoot": false,
      "uuid": "1e30c2c9-3df8-4fda-a93c-13d4d948468e",
      "parentUUID": "729e9df4-b26b-4028-a3a5-ecde5bc2995c",
      "skipped": false
    },
    {
      "title": "should contain a button",
      "fullTitle": "SimpleStringList should contain a button",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "u.findRenderedDOMComponentWithTag(\n    u.renderIntoDocument(React.createElement(SimpleStringList, {ctx: {}})),\n    <span class=\"hljs-string\">\"button\"</span>\n);",
      "isRoot": false,
      "uuid": "f1126c80-f17d-4cdd-8842-7c9dd3103bd0",
      "parentUUID": "729e9df4-b26b-4028-a3a5-ecde5bc2995c",
      "skipped": false
    },
    {
      "title": "should add strings on button click",
      "fullTitle": "SimpleStringList should add strings on button click",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> onChange = sinon.spy();\n<span class=\"hljs-keyword\">var</span> simpleStringList = u.renderIntoDocument(React.createElement(SimpleStringList, {ctx: {}, onChange: onChange}));\nsimpleStringList.getDOMNode().innerHTML.should.not.match(reg(<span class=\"hljs-string\">\"My string\"</span>));\n<span class=\"hljs-keyword\">var</span> input = u.findRenderedDOMComponentWithTag(simpleStringList, <span class=\"hljs-string\">\"input\"</span>).getDOMNode();\n<span class=\"hljs-keyword\">var</span> button = u.findRenderedDOMComponentWithTag(simpleStringList, <span class=\"hljs-string\">\"button\"</span>).getDOMNode();\nReact.addons.TestUtils.Simulate.change(input, {target: {value: <span class=\"hljs-string\">\"My string\"</span>}});\ninput.value.should.equal(<span class=\"hljs-string\">\"My string\"</span>);\nReact.addons.TestUtils.Simulate.click(button);\nonChange.called.should.equal(<span class=\"hljs-literal\">true</span>);\nsimpleStringList.getDOMNode().innerHTML.should.match(reg(<span class=\"hljs-string\">\"My string\"</span>));\ninput.value.should.equal(<span class=\"hljs-string\">\"\"</span>);",
      "isRoot": false,
      "uuid": "13bcadc6-48dd-4fe5-9fac-fa5a0aba98b2",
      "parentUUID": "729e9df4-b26b-4028-a3a5-ecde5bc2995c",
      "skipped": false
    },
    {
      "title": "should add strings on enter",
      "fullTitle": "SimpleStringList should add strings on enter",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> onChange = sinon.spy();\n<span class=\"hljs-keyword\">var</span> simpleStringList = u.renderIntoDocument(React.createElement(SimpleStringList, {ctx: {}, onChange: onChange}));\nsimpleStringList.getDOMNode().innerHTML.should.not.match(reg(<span class=\"hljs-string\">\"My string\"</span>));\n<span class=\"hljs-keyword\">var</span> input = u.findRenderedDOMComponentWithTag(simpleStringList, <span class=\"hljs-string\">\"input\"</span>).getDOMNode();\nReact.addons.TestUtils.Simulate.change(input, {target: {value: <span class=\"hljs-string\">\"My string\"</span>}});\ninput.value.should.equal(<span class=\"hljs-string\">\"My string\"</span>);\nReact.addons.TestUtils.Simulate.keyPress(input, {key: <span class=\"hljs-string\">\"Enter\"</span>});\nonChange.called.should.equal(<span class=\"hljs-literal\">true</span>);\nsimpleStringList.getDOMNode().innerHTML.should.match(reg(<span class=\"hljs-string\">\"My string\"</span>));\ninput.value.should.equal(<span class=\"hljs-string\">\"\"</span>);",
      "isRoot": false,
      "uuid": "7a4f5766-fca1-44f4-b15d-df44792417d5",
      "parentUUID": "729e9df4-b26b-4028-a3a5-ecde5bc2995c",
      "skipped": false
    },
    {
      "title": "should remove strings",
      "fullTitle": "SimpleStringList should remove strings",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> onChange = sinon.spy();\n<span class=\"hljs-keyword\">var</span> simpleStringList = u.renderIntoDocument(React.createElement(SimpleStringList, {ctx: {}, onChange: onChange, value: [<span class=\"hljs-string\">\"My string\"</span>]}));\nsimpleStringList.getDOMNode().innerHTML.should.match(reg(<span class=\"hljs-string\">\"My string\"</span>));\n<span class=\"hljs-keyword\">var</span> strings = u.findAllInRenderedTree(simpleStringList, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(node)</span> </span>{\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"hljs-keyword\">typeof</span> node.props.onClick === <span class=\"hljs-string\">\"function\"</span> &amp;&amp;\n        node.props.type !== <span class=\"hljs-string\">\"button\"</span>\n    );\n});\n<span class=\"hljs-keyword\">var</span> string = strings[<span class=\"hljs-number\">0</span>].getDOMNode();\nReact.addons.TestUtils.Simulate.click(string);\nonChange.called.should.equal(<span class=\"hljs-literal\">true</span>);\nsimpleStringList.getDOMNode().innerHTML.should.not.match(reg(<span class=\"hljs-string\">\"My string\"</span>));",
      "isRoot": false,
      "uuid": "333ad4ec-7ea3-47f5-820f-c9df8cd8f761",
      "parentUUID": "729e9df4-b26b-4028-a3a5-ecde5bc2995c",
      "skipped": false
    }
  ],
  "allHooks": [
    {
      "title": "\"before each\" hook",
      "async": 0,
      "sync": true,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": "[Circular ~.suites.suites.0]",
      "ctx": {
        "_runnable": {
          "title": "should call onChange with the new status",
          "async": 0,
          "sync": true,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/Users/pscanf/mondora/tcomb-input-collection/tests/unit/inputs/multiselect.jsx",
          "parent": "[Circular ~.suites.suites.0]",
          "ctx": "[Circular ~.allHooks.0.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "duration": 6,
          "state": "passed",
          "speed": "fast"
        },
        "test": "[Circular ~.allHooks.0.ctx._runnable]"
      },
      "_events": {},
      "_eventsCount": 0,
      "duration": 9,
      "_error": null
    },
    "[Circular ~.allHooks.0]",
    "[Circular ~.allHooks.0]",
    "[Circular ~.allHooks.0]"
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "should contain checkboxes",
      "fullTitle": "Multiselect should contain checkboxes",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "checkboxes.length.should.equal(<span class=\"hljs-number\">3</span>);\ncheckboxes.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(checkbox)</span> </span>{\n    checkbox.props.type.should.equal(<span class=\"hljs-string\">\"checkbox\"</span>);\n});",
      "isRoot": false,
      "uuid": "2b9ab3df-cae5-4d2b-9136-8184598d7f41",
      "parentUUID": "40f90b62-8e9a-4b3f-98d0-93d1c77fa950",
      "skipped": false
    },
    {
      "title": "should render checkboxes with the correct checked status based on the value passed to the component",
      "fullTitle": "Multiselect should render checkboxes with the correct checked status based on the value passed to the component",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> aInput = checkboxes[<span class=\"hljs-number\">0</span>].getDOMNode();\n<span class=\"hljs-keyword\">var</span> bInput = checkboxes[<span class=\"hljs-number\">1</span>].getDOMNode();\n<span class=\"hljs-keyword\">var</span> cInput = checkboxes[<span class=\"hljs-number\">2</span>].getDOMNode();\naInput.checked.should.equal(<span class=\"hljs-literal\">true</span>);\nbInput.checked.should.equal(<span class=\"hljs-literal\">false</span>);\ncInput.checked.should.equal(<span class=\"hljs-literal\">false</span>);",
      "isRoot": false,
      "uuid": "6d280603-7134-4902-a729-93f494eee049",
      "parentUUID": "40f90b62-8e9a-4b3f-98d0-93d1c77fa950",
      "skipped": false
    },
    {
      "title": "should change checked status on checkbox click",
      "fullTitle": "Multiselect should change checked status on checkbox click",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> aInput = checkboxes[<span class=\"hljs-number\">0</span>].getDOMNode();\n<span class=\"hljs-keyword\">var</span> bInput = checkboxes[<span class=\"hljs-number\">1</span>].getDOMNode();\n<span class=\"hljs-keyword\">var</span> cInput = checkboxes[<span class=\"hljs-number\">2</span>].getDOMNode();\nReact.addons.TestUtils.Simulate.change(aInput);\nReact.addons.TestUtils.Simulate.change(bInput);\nReact.addons.TestUtils.Simulate.change(cInput);\naInput.checked.should.equal(<span class=\"hljs-literal\">false</span>);\nbInput.checked.should.equal(<span class=\"hljs-literal\">true</span>);\ncInput.checked.should.equal(<span class=\"hljs-literal\">true</span>);\nReact.addons.TestUtils.Simulate.change(aInput);\nReact.addons.TestUtils.Simulate.change(bInput);\nReact.addons.TestUtils.Simulate.change(cInput);\naInput.checked.should.equal(<span class=\"hljs-literal\">true</span>);\nbInput.checked.should.equal(<span class=\"hljs-literal\">false</span>);\ncInput.checked.should.equal(<span class=\"hljs-literal\">false</span>);",
      "isRoot": false,
      "uuid": "ea318941-8f9f-41b3-8ffd-1577e8e3521a",
      "parentUUID": "40f90b62-8e9a-4b3f-98d0-93d1c77fa950",
      "skipped": false
    },
    {
      "title": "should call onChange with the new status",
      "fullTitle": "Multiselect should call onChange with the new status",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> aInput = checkboxes[<span class=\"hljs-number\">0</span>].getDOMNode();\n<span class=\"hljs-keyword\">var</span> bInput = checkboxes[<span class=\"hljs-number\">1</span>].getDOMNode();\n<span class=\"hljs-keyword\">var</span> cInput = checkboxes[<span class=\"hljs-number\">2</span>].getDOMNode();\n<span class=\"hljs-comment\">// Click on checkbox a</span>\nonChange.reset();\nReact.addons.TestUtils.Simulate.change(aInput);\nonChange.calledWith([]).should.equal(<span class=\"hljs-literal\">true</span>);\n<span class=\"hljs-comment\">// Click on checkbox b</span>\nonChange.reset();\nReact.addons.TestUtils.Simulate.change(bInput);\nonChange.calledWith([<span class=\"hljs-string\">\"b\"</span>]).should.equal(<span class=\"hljs-literal\">true</span>);\n<span class=\"hljs-comment\">// Click on checkbox c</span>\nonChange.reset();\nReact.addons.TestUtils.Simulate.change(cInput);\nonChange.calledWith([<span class=\"hljs-string\">\"b\"</span>, <span class=\"hljs-string\">\"c\"</span>]).should.equal(<span class=\"hljs-literal\">true</span>);",
      "isRoot": false,
      "uuid": "5489ffdb-0414-4f48-9cc3-781fc6d19869",
      "parentUUID": "40f90b62-8e9a-4b3f-98d0-93d1c77fa950",
      "skipped": false
    },
    {
      "title": "should contain a text input",
      "fullTitle": "SimpleStringList should contain a text input",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> input = u.findRenderedDOMComponentWithTag(\n    u.renderIntoDocument(React.createElement(SimpleStringList, {ctx: {}})),\n    <span class=\"hljs-string\">\"input\"</span>\n);\ninput.props.type.should.equal(<span class=\"hljs-string\">\"text\"</span>);",
      "isRoot": false,
      "uuid": "45d8f8f7-a2fa-4c79-b166-402dbb21f512",
      "parentUUID": "729e9df4-b26b-4028-a3a5-ecde5bc2995c",
      "skipped": false
    },
    {
      "title": "should contain a button",
      "fullTitle": "SimpleStringList should contain a button",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "u.findRenderedDOMComponentWithTag(\n    u.renderIntoDocument(React.createElement(SimpleStringList, {ctx: {}})),\n    <span class=\"hljs-string\">\"button\"</span>\n);",
      "isRoot": false,
      "uuid": "7d3fb92f-4c6d-451c-bcb7-e7e0037427d5",
      "parentUUID": "729e9df4-b26b-4028-a3a5-ecde5bc2995c",
      "skipped": false
    },
    {
      "title": "should add strings on button click",
      "fullTitle": "SimpleStringList should add strings on button click",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> onChange = sinon.spy();\n<span class=\"hljs-keyword\">var</span> simpleStringList = u.renderIntoDocument(React.createElement(SimpleStringList, {ctx: {}, onChange: onChange}));\nsimpleStringList.getDOMNode().innerHTML.should.not.match(reg(<span class=\"hljs-string\">\"My string\"</span>));\n<span class=\"hljs-keyword\">var</span> input = u.findRenderedDOMComponentWithTag(simpleStringList, <span class=\"hljs-string\">\"input\"</span>).getDOMNode();\n<span class=\"hljs-keyword\">var</span> button = u.findRenderedDOMComponentWithTag(simpleStringList, <span class=\"hljs-string\">\"button\"</span>).getDOMNode();\nReact.addons.TestUtils.Simulate.change(input, {target: {value: <span class=\"hljs-string\">\"My string\"</span>}});\ninput.value.should.equal(<span class=\"hljs-string\">\"My string\"</span>);\nReact.addons.TestUtils.Simulate.click(button);\nonChange.called.should.equal(<span class=\"hljs-literal\">true</span>);\nsimpleStringList.getDOMNode().innerHTML.should.match(reg(<span class=\"hljs-string\">\"My string\"</span>));\ninput.value.should.equal(<span class=\"hljs-string\">\"\"</span>);",
      "isRoot": false,
      "uuid": "04ada17e-1578-42a9-b672-1287e37b7424",
      "parentUUID": "729e9df4-b26b-4028-a3a5-ecde5bc2995c",
      "skipped": false
    },
    {
      "title": "should add strings on enter",
      "fullTitle": "SimpleStringList should add strings on enter",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> onChange = sinon.spy();\n<span class=\"hljs-keyword\">var</span> simpleStringList = u.renderIntoDocument(React.createElement(SimpleStringList, {ctx: {}, onChange: onChange}));\nsimpleStringList.getDOMNode().innerHTML.should.not.match(reg(<span class=\"hljs-string\">\"My string\"</span>));\n<span class=\"hljs-keyword\">var</span> input = u.findRenderedDOMComponentWithTag(simpleStringList, <span class=\"hljs-string\">\"input\"</span>).getDOMNode();\nReact.addons.TestUtils.Simulate.change(input, {target: {value: <span class=\"hljs-string\">\"My string\"</span>}});\ninput.value.should.equal(<span class=\"hljs-string\">\"My string\"</span>);\nReact.addons.TestUtils.Simulate.keyPress(input, {key: <span class=\"hljs-string\">\"Enter\"</span>});\nonChange.called.should.equal(<span class=\"hljs-literal\">true</span>);\nsimpleStringList.getDOMNode().innerHTML.should.match(reg(<span class=\"hljs-string\">\"My string\"</span>));\ninput.value.should.equal(<span class=\"hljs-string\">\"\"</span>);",
      "isRoot": false,
      "uuid": "88c00187-aabd-4552-95d7-6a91da8c3b8e",
      "parentUUID": "729e9df4-b26b-4028-a3a5-ecde5bc2995c",
      "skipped": false
    },
    {
      "title": "should remove strings",
      "fullTitle": "SimpleStringList should remove strings",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> onChange = sinon.spy();\n<span class=\"hljs-keyword\">var</span> simpleStringList = u.renderIntoDocument(React.createElement(SimpleStringList, {ctx: {}, onChange: onChange, value: [<span class=\"hljs-string\">\"My string\"</span>]}));\nsimpleStringList.getDOMNode().innerHTML.should.match(reg(<span class=\"hljs-string\">\"My string\"</span>));\n<span class=\"hljs-keyword\">var</span> strings = u.findAllInRenderedTree(simpleStringList, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(node)</span> </span>{\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"hljs-keyword\">typeof</span> node.props.onClick === <span class=\"hljs-string\">\"function\"</span> &amp;&amp;\n        node.props.type !== <span class=\"hljs-string\">\"button\"</span>\n    );\n});\n<span class=\"hljs-keyword\">var</span> string = strings[<span class=\"hljs-number\">0</span>].getDOMNode();\nReact.addons.TestUtils.Simulate.click(string);\nonChange.called.should.equal(<span class=\"hljs-literal\">true</span>);\nsimpleStringList.getDOMNode().innerHTML.should.not.match(reg(<span class=\"hljs-string\">\"My string\"</span>));",
      "isRoot": false,
      "uuid": "e2de5b67-26da-4b72-9057-c953df4acb15",
      "parentUUID": "729e9df4-b26b-4028-a3a5-ecde5bc2995c",
      "skipped": false
    }
  ],
  "allFailures": []
}